type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusResponse = record {
  status : CanisterStatus;
  freezing_threshold : nat;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt vec nat8;
};
type CanisterStatusResponseDto = record {
  detail : CanisterStatusResponse;
  canister : principal;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type ErrorInfo = record { code : nat32; message : text };
type GetCanisterStatusListResponse = variant {
  Ok : vec GetCanisterStatusResponse;
  Err : ErrorInfo;
};
type GetCanisterStatusResponse = variant {
  Ok : CanisterStatusResponseDto;
  Err : ErrorInfo;
};
service : () -> {
  get_canister_status : (principal) -> (GetCanisterStatusResponse);
  get_canister_status_list : (vec principal) -> (GetCanisterStatusListResponse);
}
